//NOT WORKING - clearDisplay5() doesn't recognise the added <p> elements as nodes/children of Display-5

//STILL TO DO
////further - give each word a property (syllables) and use this to calculate line length, not word length - Turn it into a class of object with 2 properties - syllables and name
//// 137-144 clearDisplay - doesn't work because it can;t find the child nodes to delete, and they don't log, but they seem to be 'there'.

/*Refactor with JQuery
-replace all js dom manipulation with jQuery
- fix display5
- fetch the list of words - https://raw.githubusercontent.com/first20hours/google-10000-english/master/20k.txt
- use these words for haikus

*/
var buttonCount = 0;

function controlResetButtonVisibility() {
    if (buttonCount < 2) {
        buttonCount++
        alert(`Be warned - you only have ${3 - buttonCount} more resets available!`);
    } else if (buttonCount === 2) {
        alert(`This is your last reset - from now on, trust yourself and let the words soar like a bold eagle...`);
        $('#reset').remove();
    };
};

function checkSubmission() {
    var lineOne = document.getElementById("line one").value;
    var lineTwo = document.getElementById("line two").value;
    var lineThree = document.getElementById("line three").value;
    if (lineOne.length > 0 && lineTwo.length > 0 && lineThree.length > 0) {
        $("#Display-4").remove();
        $('#keepHaiku4').remove();
        var userHaikuContainer = $("<div>").attr("id", "Display-4");
        var lineOneElement = $("<p>").text(lineOne);
        var lineTwoElement = $("<p>").text(lineTwo);
        var lineThreeElement = $("<p>").text(lineThree);
        $(`#haikuEntering`).append(userHaikuContainer);
        $('#Display-4').append(lineOneElement, lineTwoElement, lineThreeElement);
        $('#keepHaiku4').show();
    } else {
        alert("You need to add something into each box - allow that power to glisten, child...")
    };
};

document.addEventListener("DOMContentLoaded", () => {

    //Reset Button on submit own haiku can only be pressed twice 

    $('#reset').click(function () {
        controlResetButtonVisibility()
    });

    //--------------------------------------------------------------------------------//

    $('#keepHaiku4').hide()
    $('#submit').click(function () {
        checkSubmission();
    });

    //-------------------------------------------------------------//


    //Random Haiku Generation////

    // VARIBLES AND ARRAYS
    let unformattedFirstLine = ""
    let unformattedSecondLine = ""
    let unformattedThirdLine = ""
    let firstLine = ""
    let secondLine = ""
    let thirdLine = ""

    const nouns = ["world", "money", "monkey", "honey", "south", "breath", "wind", "love", "I", "you", "they", "tower", "cloud", "sun", "beyond", "trees", "melody", "hands"];
    const joins = ["on", "with", "in", "for", "will", "together", "apart", "far", "at"];
    const verbs = ["fly", "feel", "think", "love", "go", "run", "slide", "jostle", "shout", "sing", "sit", "breathe", "swoop"];
    const adjectives = ["wild", "constant", "jubilant", "red", "pale", "charmed", "blue", "green", "strong", "hopeful"];
    const adverbs = ["slowly", "gently", "fleetingly", "movingly", "calmly", "suddenly", "wholly", "lithely", "timely"];
    var randomNumber;    
    var which = "" //holds which type of word has just been used

    $('#keepHaiku5').hide()

    $('#randomHaiku').click(function () {
        $("#randomHaikuAdded").remove();

        function generateHaiku() { //generates the haiku
            
            ((whichLine) => { //generates Line One
                console.log(`Line ${whichLine}:`)
                haikuStart(whichLine); //starts the poem
                nextWord(whichLine); //displays a word depending on the type of the previous word
                nextWord(whichLine); //ditto
                nextWord(whichLine);
                nextWord(whichLine);
                var trimmedFirstLine = unformattedFirstLine.trim();
                firstLine = trimmedFirstLine.charAt(0).toUpperCase() + trimmedFirstLine.substr(1);
                firstLine += ","
                console.log(firstLine); //logs the array of words generated by the functions above
                displayLine(whichLine); //displays the line in the right place in the HTML DOM
                unformattedFirstLine = ""; //clears the array so if you press Generate button again, it shows a new haiku
            })(1) //calls the function and sets whichLine to 1

            function generateTwo(whichLine) {
                console.log(`Line ${whichLine}:`)
                nextWord(whichLine);
                nextWord(whichLine);
                nextWord(whichLine);
                nextWord(whichLine);
                nextWord(whichLine);
                nextWord(whichLine);
                nextWord(whichLine);
                var trimmedSecondLine = unformattedSecondLine.trim();
                secondLine = trimmedSecondLine.charAt(0).toUpperCase() + trimmedSecondLine.substr(1);
                secondLine += ","
                console.log(secondLine)
                displayLine(whichLine)
                unformattedSecondLine = "";
            }
            generateTwo(2);

            function generateThree(whichLine) {
                console.log(`Line ${whichLine}:`)
                nextWord(whichLine);
                nextWord(whichLine);
                nextWord(whichLine);
                nextWord(whichLine);
                nextWord(whichLine);
                var trimmedThirdLine = unformattedThirdLine.trim();
                thirdLine = trimmedThirdLine.charAt(0).toUpperCase() + trimmedThirdLine.substr(1);
                thirdLine += "."
                console.log(thirdLine)
                displayLine(whichLine)
                unformattedThirdLine = "";
            };
            generateThree(3);

        }
        generateHaiku()

    });



    //HELPER FUNCTIONS - GENERATING A RANDOM NUMBER AND PASSING THE WORD TO THE APPROPRIATE PLACE IN THE HTML DOM//

    function generateRandom(min, max) { //generates a random number for use elsewhere
        randomNumber = (Math.floor(Math.random() * (max - min)) + min);
    };

    function displayLine(whichLine) { //displays the text in the right place

        if (whichLine == 1) {
            var randomLineOne = $("<p>").text(firstLine).attr("id", "randomHaikuAdded");
            $('#haiku5Placeholder').append(randomLineOne);
        } else if (whichLine == 2) {
            var randomLineTwo = $("<p>").text(secondLine).attr("id", "randomHaikuAdded");
            $('#haiku5Placeholder').append(randomLineTwo);
        } else if (whichLine == 3) {
            var randomLineThree = $("<p>").text(thirdLine).attr("id", "randomHaikuAdded");
            $('#haiku5Placeholder').append(randomLineThree);
        } else {
            console.log("whichLine variable has no value")
        };
    };

    function haikuStart(whichLine) { //starts the haiku with a random word

        x = Math.floor(Math.random() * 5);
        if (x == 0) {
            generateNoun(whichLine)
            which = "noun"
        } else if (x == 1) {
            generateJoin(whichLine)
            which = "join"
        } else if (x == 2) {
            generateVerb(whichLine)
            which = "verb"
        } else if (x == 3) {
            generateAdjective(whichLine)
            which = "adjective"
        } else if (x == 4) {
            generateAdverb(whichLine)
            which = "adverb"
        }
    };

    function nextWord(whichLine) { //chooses the next word depending on the last

        switch (which) {
            case "noun":
                generateAdverb(whichLine)
                which = "adverb"
                break;
            case "join":
                generateAdjective(whichLine)
                which = "adjective"
                break;
            case "verb":
                generateJoin(whichLine)
                which = "join"
                break;
            case "adjective":
                generateNoun(whichLine)
                which = "noun"
                break;
            case "adverb":
                generateVerb(whichLine)
                which = "verb"
                break;
        }

    };

    //GENERATING THE WORDS//

    function generateNoun(whichLine) {
        generateRandom(0, nouns.length)
        let thisNoun = `${nouns[randomNumber]} `
        //console.log(`thisNoun: ${thisNoun}`)
        if (whichLine == 1) {
            //firstLine.push(thisNoun)
            unformattedFirstLine += thisNoun
            //console.log(firstLine)
        } else if (whichLine == 2) {
            unformattedSecondLine += thisNoun
        } else if (whichLine == 3) {
            unformattedThirdLine += thisNoun;
        } else {
            console.log("whichLine has no value")
        }

    };

    function generateJoin(whichLine) {
        generateRandom(0, joins.length)
        let thisJoin = `${joins[randomNumber]} `
        //console.log(`thisJoin: ${thisJoin}`)
        if (whichLine == 1) {
            //firstLine.push(thisJoin)
            unformattedFirstLine += thisJoin
            //console.log(firstLine)
        } else if (whichLine == 2) {
            unformattedSecondLine += thisJoin
        } else if (whichLine == 3) {
            unformattedThirdLine += thisJoin;
        } else {
            console.log("whichLine has no value")
        }
    };

    function generateVerb(whichLine) {
        generateRandom(0, verbs.length)
        let thisVerb = `${verbs[randomNumber]} `
        //console.log(`thisVerb: ${thisVerb}`)
        if (whichLine == 1) {
            //firstLine.push(thisVerb)
            unformattedFirstLine += thisVerb
            //console.log(firstLine)
        } else if (whichLine == 2) {
            unformattedSecondLine += thisVerb
        } else if (whichLine == 3) {
            unformattedThirdLine += thisVerb;
        } else {
            console.log("whichLine has no value")
        }
    };

    function generateAdjective(whichLine) {
        generateRandom(0, adjectives.length)
        let thisAdjective = `${adjectives[randomNumber]} `
        //console.log(`thisAdjective: ${thisAdjective}`)
        if (whichLine == 1) {
            //firstLine.push(thisAdjective)
            unformattedFirstLine += thisAdjective
            //console.log(firstLine)
        } else if (whichLine == 2) {
            unformattedSecondLine += thisAdjective
        } else if (whichLine == 3) {
            unformattedThirdLine += thisAdjective;
        } else {
            console.log("whichLine has no value")
        }
    };

    function generateAdverb(whichLine) {
        generateRandom(0, adverbs.length)
        let thisAdverb = `${adverbs[randomNumber]} `
        //console.log(`thisAdverb: ${thisAdverb}`)
        if (whichLine == 1) {
            //firstLine.push(thisAdverb)
            unformattedFirstLine += thisAdverb
            //console.log(firstLine)
        } else if (whichLine == 2) {
            unformattedSecondLine += thisAdverb
        } else if (whichLine == 3) {
            unformattedThirdLine += thisAdverb;
        } else {
            console.log("whichLine has no value")
        };
    };
}, false);